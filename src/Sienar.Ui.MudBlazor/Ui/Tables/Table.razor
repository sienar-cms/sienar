@using Sienar.Data
@namespace Sienar.Ui
@typeparam TItem

<MudTable
	T="TItem"
	ServerData="LoadDataFunc"
	RowsPerPage="RowsPerPage"
	Loading="_loading"
	Elevation="10"
	@ref="@TableRef">
	<ToolBarContent>
		<H6 Class="mb-0">@TableTitle</H6>
		<MudSpacer />

		@if (!HideSearch)
		{
			<MudTextField
				@bind-Value="@SearchTerm"
				Placeholder="Search"
				Adornment="Adornment.Start"
				AdornmentIcon="@Icons.Material.Filled.Search"
				IconSize="Size.Medium"
				Class="mt-0"
				DebounceInterval="500"
				Clearable/>
		}

		@if (ToolBarContent != null)
		{
			<div class="@(FlexToolbarContent ? "ml-5 d-flex" : "ml-5")">
				@ToolBarContent
			</div>
		}
	</ToolBarContent>

	<HeaderContent>
		@HeaderContent
	</HeaderContent>

	<RowTemplate>
		@RowTemplate.Invoke(context)
	</RowTemplate>

	<NoRecordsContent>
		<P>
			There are not currently any @TableTitle to display
		</P>
	</NoRecordsContent>

	<PagerContent>
		<MudTablePager PageSizeOptions="PageSizeOptions"/>
	</PagerContent>
</MudTable>

@code {

	[Parameter]
	public required string TableTitle { get; set; }

	[Parameter]
	public bool HideSearch { get; set; }

	[Parameter]
	public bool FlexToolbarContent { get; set; }

	[Parameter]
	public int RowsPerPage { get; set; } = 5;

	[Parameter]
	public EventCallback<int> RowsPerPageChanged { get; set; }

	[Parameter]
	public int[] PageSizeOptions { get; set; } =
	{
		5,
		10,
		25
	};

	[Parameter]
	public RenderFragment? ToolBarContent { get; set; }

	[Parameter]
	public RenderFragment? HeaderContent { get; set; }

	[Parameter]
	public required RenderFragment<TItem> RowTemplate { get; set; }

	[Parameter]
	public required Func<Filter?, Task<PagedQuery<TItem>>> LoadData { get; set; }

	private MudTable<TItem> TableRef { get; set; } = null!;
	private bool _loading;
	private string _searchTerm = string.Empty;

	private string SearchTerm
	{
		get => _searchTerm;
		set
		{
			if (_searchTerm == value)
			{
				return;
			}

			_searchTerm = value;
			TableRef.ReloadServerData();
		}
	}


	private async Task<TableData<TItem>> LoadDataFunc(TableState state)
	{
		_loading = true;
		StateHasChanged();

		var filter = new Filter
		{
			SortDescending = state.SortDirection == SortDirection.Descending,
			Page = state.Page + 1, // MudBlazor is 0-indexed
			PageSize = RowsPerPage = state.PageSize
		};

		if (state.SortDirection != SortDirection.None && !string.IsNullOrWhiteSpace(state.SortLabel))
		{
			filter.SortName = state.SortLabel;
		}

		if (!string.IsNullOrWhiteSpace(SearchTerm))
		{
			filter.SearchTerm = SearchTerm;
		}

		var result = await LoadData(filter);
		_loading = false;

		return new TableData<TItem>
		{
			Items = result.Items,
			TotalItems = result.TotalCount
		};
	}

	public Task ReloadTable() => TableRef.ReloadServerData();

}