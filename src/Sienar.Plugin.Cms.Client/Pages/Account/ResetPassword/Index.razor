@inherits FormPage<Sienar.Identity.Requests.ResetPasswordRequest>
@attribute [AllowAnonymous]
@attribute [Route(DashboardUrls.Account.ResetPassword.Index)]
@inject IStatusService<ResetPasswordRequest> PasswordResetService

<DocTitle Title="Reset Password"/>

<NarrowContainer>
	<StandardForm
		Model="@Model"
		OnSubmit="@OnSubmit"
		Title="Reset password"
		SubmitText="Reset my password">
		<Information>
			<MudText>
				Please select a new password for your account. Your password should be at least 8 characters long, and it should contain a mix of lowercase and uppercase letters, numbers, and special characters.
			</MudText>
		</Information>

		<Fields>
			<Textbox
				@bind-Value="Model.NewPassword"
				For="() => Model.NewPassword"
				InputType="InputType.Password"
				Label="New password"/>

			<Textbox
				@bind-Value="Model.ConfirmNewPassword"
				For="() => Model.ConfirmNewPassword"
				InputType="InputType.Password"
				Label="Confirm new password"/>

			<Honeypot @bind-Value="Model.SecretKeyField"/>
		</Fields>
	</StandardForm>
</NarrowContainer>


@code {

	/// <summary>
	/// The ID of the user whose password to reset
	/// </summary>
	[Parameter]
	[SupplyParameterFromQuery]
	public Guid UserId { get; set; }

	/// <summary>
	/// The verification code of the user whose password to reset
	/// </summary>
	[Parameter]
	[SupplyParameterFromQuery]
	public Guid Code { get; set; }

	/// <inheritdoc />
	protected override void OnInitialized()
	{
		Model.UserId = UserId;
		Model.VerificationCode = Code;
	}

	private async Task OnSubmit()
	{
		await SubmitRequest(() => PasswordResetService.Execute(Model));
		if (WasSuccessful)
		{
			NavManager.NavigateTo(DashboardUrls.Account.ResetPassword.Successful);
		}
	}

}