@inherits NavBase
@inject IComponentProvider ComponentProvider
 
<MudAppBar Elevation="1">
	<MudHidden Breakpoint="Breakpoint.LgAndUp">
		<MudIconButton
			Icon="@Icons.Material.Filled.Menu"
			Color="Color.Inherit"
			OnClick="@ToggleDrawer"/>
	</MudHidden>

	<MudHidden Breakpoint="Breakpoint.MdAndDown">
		<OptionalComponent
			Type="@_components.GetComponent(DashboardLayoutSections.AppbarLeft)"/>

		@for (var i = 0; i < Menus.Count; i++)
		{
			if (i > 0)
			{
				<MudDivider
					Class="ma-4"
					DividerType="DividerType.Middle"
					FlexItem
					Vertical/>
			}

			@foreach (var link in Menus[i])
			{
				<TopNavMenuLink Link="link"/>
			}
		}

		<OptionalComponent
			Type="_components.GetComponent(DashboardLayoutSections.AppbarRight)"/>
	</MudHidden>
</MudAppBar>

<MudHidden Breakpoint="Breakpoint.LgAndUp">
	<MudDrawer
		Elevation="1"
		@bind-Open="MenuOpen"
		Variant="DrawerVariant.Temporary">
		<DrawerNavContent
			Menus="Menus"
			LayoutType="LayoutType"/>
	</MudDrawer>
</MudHidden>

@code {

	private ComponentDictionary _components = null!;

	/// <summary>
	/// The type of the current layout
	/// </summary>
	[Parameter]
    public required Type LayoutType { get; set; }

	/// <inheritdoc />
	protected override void OnInitialized()
	{
		_components = ComponentProvider.Access(LayoutType);
	}

}